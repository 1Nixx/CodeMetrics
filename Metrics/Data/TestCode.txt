using System;
using System.Collections.Generic;
using System.Diagnostics.Tracing;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace LabaLongArithm
{
	class Program
	{
		public static int IsItPalyndrome(string a)
		{
			var Check = 0;
			for (int i = 0; i <= a.Length - 1; i++)
			{
				if (a[i] == a[a.Length - 1 - i])
				{
					Check++;
				}

			}
			return Check;
		}

		public static int IsItPalyndrome(int[] arr)
		{
			var Check = 0;
			for (int i = 0; i <= arr.Length - 1; i++)
			{
				if (arr[i] == arr[arr.Length - 1 - i])
				{
					Check++;
				}

			}
			return Check;
		}

		public static int[] MoveObj(int[] arr)
		{
			int Prev = arr[0];
			int Buf = 0;
			for (int i = 0; i <= arr.Length - 1; i++)
			{
				if (i != arr.Length - 1)
				{
					Buf = arr[i + 1];
					arr[i + 1] = Prev;
					Prev = Buf;
				}
				else
				{
					arr[0] = Buf;
				}
			}
			return arr;
		}

		public static int[] DeleteZero(int[] arr)
		{
			var i = 0;
			if (arr[0] == 0)
			{
				i = 1;
				while (arr[i] == 0)
				{
					i++;
				}
			}
			int[] HelpArr = new int[arr.Length - i];
			for (int counter = i; counter <= arr.Length - 1; counter++)
			{
				HelpArr[counter - i] = arr[counter];
			}
			Array.Resize(ref arr, arr.Length - i);
			arr = HelpArr;
			return arr;
		}

		public static void Print(int[] arr)
		{
			for (int i = 0; i <= arr.Length - 1; i++)
			{
				if (i == 0 && arr[0] == 0)
				{
					while (arr[i] == 0)
					{
						i++;
					}
					i--;
				}
				else
				{
					Console.Write(arr[i]);
				}
			}
		}

		static void Main(string[] args)
		{
			string EnteredNumber;
			int Counter;
			int Check;
			int PalyndromeCheck;
			bool Flag;
			Console.WriteLine("Enter the number");
			Console.ForegroundColor = ConsoleColor.Green;

			do
			{
				EnteredNumber = Console.ReadLine();
				Counter = 0;
				Flag = false;
				while (Flag == false && Counter <= EnteredNumber.Length - 1)
				{
					if (int.TryParse(EnteredNumber[Counter].ToString(), out Check) == false)
					{
						Flag = true;
						break;
					}
					Counter++;
				}

				if (Counter <= EnteredNumber.Length - 1)
				{
					Console.WriteLine("Incorrect Input!!!");
				}
				//Palyndrome checking
				else
				{
					PalyndromeCheck = IsItPalyndrome(EnteredNumber);

					if (PalyndromeCheck == EnteredNumber.Length)
					{
						Console.WriteLine("It's a palyndrome! Enter other number");
					}
					else
					{
						Flag = true;
					}
				}


			} while (Flag == false || Counter <= EnteredNumber.Length - 1);

			int[] NumberInt = new int[EnteredNumber.Length];

			for (int i = 0; i <= EnteredNumber.Length - 1; i++)
			{
				NumberInt[i] = int.Parse(EnteredNumber[i].ToString());
			}


			Flag = false;
			int[] ReverseNumber = new int[0];
			int ForOutput = 0;

			while (Flag == false)
			{

				PalyndromeCheck = IsItPalyndrome(NumberInt);

				if (PalyndromeCheck == NumberInt.Length)
				{
					Flag = true;
				}
				else
				{
					Array.Resize(ref NumberInt, NumberInt.Length + 1);
					Array.Resize(ref ReverseNumber, NumberInt.Length);

					for (int i = 0; i <= NumberInt.Length - 1; i++)
					{
						ReverseNumber[i] = NumberInt[i];
					}

					Array.Reverse(ReverseNumber);
					NumberInt = MoveObj(NumberInt);
					Print(NumberInt); Console.Write(" + "); Print(ReverseNumber);

					for (int i = 0; i <= NumberInt.Length - 1; i++)
					{

						NumberInt[NumberInt.Length - 1 - i] += ReverseNumber[ReverseNumber.Length - 1 - i];
						if (NumberInt[NumberInt.Length - 1 - i] >= 10)
						{
							NumberInt[NumberInt.Length - 2 - i] += (NumberInt[NumberInt.Length - 1 - i] / 10);
							NumberInt[NumberInt.Length - 1 - i] -= ((NumberInt[NumberInt.Length - 1 - i] / 10) * 10);
						}

					}
					NumberInt = DeleteZero(NumberInt);
					Console.Write(" = "); Print(NumberInt);
					Console.WriteLine();
				}
				ForOutput++;

			}
			Print(NumberInt);
			Console.WriteLine(" - palyndrome");

			Console.WriteLine("Press 'Enter' to continue...");


			Console.ReadLine();
		}
	}
}